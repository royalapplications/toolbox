<DynamicFolderExport>
  <Name>Dynamic Folder Export</Name>
  <Objects>
    <DynamicFolderExportObject>
      <Type>DynamicFolder</Type>
      <Name>AWS EC2 (Python)</Name>
      <Description>This Dynamic Folder sample for AWS EC2 supports grabbing all EC2 instances of a specified region.</Description>
      <Notes><![CDATA[<h2><strong>Dynamic Folder sample for Amazon Web Services (AWS) EC2</strong></h2>

<p><strong>Version</strong>: 1.0.1<br />
<strong>Author</strong>: Royal Applications</p>

<p>This Dynamic Folder sample for AWS EC2 supports grabbing all EC2 instances of a specified region.</p>

<h3><strong>Prerequisites</strong></h3>

<ul>
	<li>AWS Command Line Interface (CLI) needs to be installed and configured.</li>
</ul>

<h3><strong>Setup</strong></h3>

<ul>
	<li>Enter the region that you want to grab instances from in the &quot;Region&quot; field in the &quot;Custom Properties&quot; section or leave it as an empty string if you configured the AWS CLI with a default region.</li>
</ul>

<h3><strong>Notes</strong></h3>

<ul>
	<li>While the provided script sets the username of created connections, the password will always be empty. There are multiple different ways to solve this. For instance, you could assign a credential to this dynamic folder and change the script to reference credentials from parent folder. Alternatively, you may also just use &quot;Connect with Options - Prompt for Credentials&quot; when establishing a connection.</li>
</ul>
]]></Notes>
      <CustomProperties>
        <CustomProperty>
          <Name>Region</Name>
          <Type>Text</Type>
          <Value>TODO</Value>
        </CustomProperty>
      </CustomProperties>
      <ScriptInterpreter>python</ScriptInterpreter>
      <Script><![CDATA[import subprocess
import json

def get_instances(region = ""):
	cmd = "aws ec2 describe-instances --output json"

	if region != "":
		cmd += " --region " + region

	aws = subprocess.Popen(cmd, stdout=subprocess.PIPE, shell=True)
	(response_json, err) = aws.communicate()
	exit_code = aws.wait()

	response = json.loads(response_json)

	connections = [ ]

	for reservation in response.get("Reservations", None):
		for instance in reservation.get("Instances", None):
			instance_id = instance.get("InstanceId", "")
			platform = instance.get("Platform", "")

			is_windows = platform.lower() == "windows"
			username = "Administrator" if is_windows else "ec2-user"

			public_ip_address = instance.get("PublicIpAddress", "")
			public_hostname = instance.get("PublicDnsName", "")

			private_ip_address = instance.get("PrivateIpAddress", "")
			private_hostname = instance.get("PrivateDnsName", "")

			tags = instance.get("Tags")
			name = instance_id

			if tags is not None:
				for tag in tags:
					if tag.get("Key", "").lower() == "name":
						tagValue = tag.get("Value", "")

						if tagValue.lower() != "":
							name = tagValue
						
						break

			computer_name = public_hostname

			if computer_name == "":
				computer_name = public_ip_address

			if computer_name == "":
				computer_name = private_hostname

			if computer_name == "":
				computer_name = private_ip_address

			connection = { }

			if not is_windows:
				connection["Type"] = "TerminalConnection"
				connection["TerminalConnectionType"] = "SSH"
			else:
				connection["Type"] = "RemoteDesktopConnection"

			connection["ID"] = instance_id
			connection["Name"] = name
			connection["ComputerName"] = computer_name
			connection["Username"] = username

			connections.append(connection)

	store = {
		"Objects": connections
	}

	store_json = json.dumps(store)

	return store_json

print(get_instances("$CustomProperty.Region$"))]]></Script>
      <DynamicCredentialScriptInterpreter>json</DynamicCredentialScriptInterpreter>
      <DynamicCredentialScript><![CDATA[{
	"Username": "user",
	"Password": "pass"
}]]></DynamicCredentialScript>
      <DynamicFolderScriptTokenMode>ReplaceInline</DynamicFolderScriptTokenMode>
      <DynamicFolderScriptEnvironmentPrefix>DynFolder_</DynamicFolderScriptEnvironmentPrefix>
      <DynamicCredentialScriptTokenMode>ReplaceInline</DynamicCredentialScriptTokenMode>
      <DynamicCredentialScriptEnvironmentPrefix>DynCredential_</DynamicCredentialScriptEnvironmentPrefix>
    </DynamicFolderExportObject>
  </Objects>
</DynamicFolderExport>