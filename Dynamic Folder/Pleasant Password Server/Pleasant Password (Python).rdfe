{
  "Name": "Dynamic Folder Export",
  "Objects": [
    {
      "Type": "DynamicFolder",
      "Name": "Pleasant Password (Python)",
      "Description": "This Dynamic Folder sample for Pleasant Password Server supports Dynamic Credentials, Multi-Factor-Authentication (MFA), APIv4 and APIv5.",
      "Notes": "<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" />\n<title></title>\n<style type=\"text/css\">.cs2654AE3A{text-align:left;text-indent:0pt;margin:0pt 0pt 0pt 0pt}\n\t\t\t.csE8BD414E{color:#000000;background-color:transparent;font-family:'Times New Roman';font-size:18pt;font-weight:bold;font-style:normal;}\n\t\t\t.csAD7A2888{text-align:left;text-indent:0pt;margin:12pt 0pt 12pt 0pt}\n\t\t\t.cs102784{color:#000000;background-color:transparent;font-family:'Times New Roman';font-size:12pt;font-weight:bold;font-style:normal;}\n\t\t\t.cs23FB0664{color:#000000;background-color:transparent;font-family:'Times New Roman';font-size:12pt;font-weight:normal;font-style:normal;}\n\t\t\t.cs17BF9202{color:#000000;background-color:transparent;font-family:'Times New Roman';font-size:13.5pt;font-weight:bold;font-style:normal;}\n\t\t\t.cs37063928{text-align:left;margin:0pt 0pt 0pt 0pt;list-style-type:disc;color:#000000;background-color:transparent;font-family:Arial;font-size:12pt;font-weight:normal;font-style:normal}\n\t\t\t.csD95D4409{text-align:left;margin:0pt 0pt 0pt 0pt;list-style-type:circle;color:#000000;background-color:transparent;font-family:'Courier New';font-size:12pt;font-weight:normal;font-style:normal}\n</style>\n<h2><span style=\"font-kerning: none\"><b>Dynamic Folder sample for Pleasant Password Server</b></span></h2>\n\n<p><strong>Version</strong>: 1.2.3<br />\n<strong>Authors</strong>: Royal Apps,&nbsp;Petr Stepan</p>\n\n<p>This Dynamic Folder sample for Pleasant Password Server supports Dynamic Credentials,&nbsp;Multi-Factor-Authentication (MFA), APIv4 and&nbsp;APIv5. Python 2 and Python 3 are supported.</p>\n\n<h3><strong>Requirements</strong></h3>\n\n<ul>\n\t<li>Python Module: __future__</li>\n\t<li>Python Module: sys</li>\n\t<li>Python Module: functools</li>\n\t<li>Python Module: json</li>\n\t<li>Python Module: requests</li>\n\t<li>Python Module: urllib3</li>\n\t<li>Python Module: tkinter</li>\n</ul>\n\n<h3><strong>Setup</strong></h3>\n\n<ul>\n\t<li>Enter your &quot;Server URL&quot; in the &quot;Custom Properties&quot; section (without trailing slash).</li>\n\t<li>Enter your &quot;API Version&quot; in the &quot;Custom Properties&quot; section (defaults to APIv5).\n\t<ul>\n\t\t<li>Supported version: APIv4, APIv5</li>\n\t</ul>\n\t</li>\n\t<li>Choose whether you want to omit domain name from credentials in the &quot;Custom Properties&quot; section.</li>\n\t<li>Enter or assign your Pleasant Password Server credentials.</li>\n</ul>\n",
      "CustomProperties": [
        {
          "Name": "Server URL",
          "Type": "URL",
          "Value": "TODO"
        },
        {
          "Name": "API Version",
          "Type": "Text",
          "Value": "5"
        },
        {
          "Name": "Omit Domain",
          "Type": "YesNo",
          "Value": "False"
        }
      ],
      "Script": "from __future__ import print_function\nimport sys\nfrom functools import partial\nimport json\nimport requests\nimport urllib3\n\ntry:\n\t# for Python2\n\tfrom Tkinter import * \nexcept ImportError:\n\t# for Python3\n\tfrom tkinter import *\n\nclass TakeInput(object):\n\tdef __init__(self, request_message):\n\t\tself.root = Tk()\n\n\t\ttitle = \"\"\n\n\t\tif request_message:\n\t\t\ttitle = request_message\n\t\t\t\n\t\t\tif title.endswith(\":\"):\n\t\t\t\ttitle = title[:-1]\n\n\t\tself.root.title(title)\n\n\t\t# Do not allow the user to resize the window\n\t\tself.root.resizable(False, False)\n\t\t\n\t\tself.string = \"\"\n\n\t\tself.frame = Frame(self.root)\n\n\t\tself.acceptInput(request_message)\n\t\tself.frame.pack(padx=17, pady=17)\n\n\tdef acceptInput(self, request_message):\n\t\tr = self.frame\n\n\t\ticon = Label(r, text=\"\", image=\"::tk::icons::question\")\n\t\ticon.grid(row=0, column=0, rowspan=2, sticky=\"w\")\n\n\t\tlabel = Label(r, text=request_message)\n\t\tlabel.grid(row=0, column=1, padx=(9, 0), sticky=\"nw\")\n\t\t\n\t\tself.e = Entry(r, text='Name')\n\t\tself.e.grid(row=1, column=1, padx=(13, 0), sticky=\"nw\")\n\t\tself.e.configure(width=30)\n\t\tself.e.focus_set()\n\n\t\tb = Button(r, text='        OK        ', command=self.gettext)\n\t\tb.grid(row=2, column=1, sticky=\"ne\", pady=(10, 0))\n\t\t\n\t\tself.root.bind('<Return>', self.gettext)\n\n\tdef gettext(self, event=None):\n\t\tself.string = self.e.get()\n\t\tself.root.destroy()\n\n\tdef getString(self):\n\t\treturn self.string\n\t\n\tdef configureWindowGeometry(self):\n\t\t# Get the window size\n\t\twindow_width = self.root.winfo_width()\n\t\twindow_height = self.root.winfo_height()\n\n\t\t# Get the screen size\n\t\tscreen_width = self.root.winfo_screenwidth()\n\t\tscreen_height = self.root.winfo_screenheight()\n\n\t\t# Get the window position from the top dynamically as well as position from left or right as follows\n\t\tposition_top = int((screen_height / 2) - (window_height / 2))\n\t\tposition_right = int((screen_width / 2) - (window_width / 2))\n\n\t\t# Shift up by a couple of pixels to account for the title bar\n\t\tposition_top -= 30\n\n\t\t# This will center the window\n\t\tself.root.geometry(str(window_width) + \"x\" + str(window_height) + \"+\" + str(position_right) + \"+\" + str(position_top))\n\n\tdef waitForInput(self):\n\t\tself.root.lift()\n\n\t\tself.root.attributes('-topmost', True)\n\t\tself.root.after_idle(self.root.attributes, '-topmost', False)\n\n\t\t# Ensure that layout is ready\n\t\tself.root.update_idletasks()\n\n\t\tself.configureWindowGeometry()\n\n\t\tself.root.mainloop()\n\ndef show_prompt(request_message):\n\tmsg_box = TakeInput(request_message)\n\n\t# loop until the user makes a decision and the window is destroyed\n\tmsg_box.waitForInput()\n\n\treturn msg_box.getString()\n\n\ndef convert_notes_to_html(notes):\n\tif notes is None:\n\t\treturn \"\"\n\telse:\n\t\treturn notes.replace(\"\\r\\n\", \"<br />\").replace(\"\\r\", \"<br />\").replace(\"\\n\", \"<br />\")\n\n\ndef create_credential(url, headers, credential):\n\tcredential_id = credential[\"Id\"]\n\tcredential_name = credential[\"Name\"]\n\tcredential_url = credential[\"Url\"]\n\tcredential_username = credential[\"Username\"]\n\tcredential_notes = convert_notes_to_html(credential[\"Notes\"])\n\tcredential_custom_properties = credential[\"CustomUserFields\"]\n\tcredential_color = \"\"\n\n\tcredential_custom_app_fields = credential.get(\"CustomApplicationFields\", None)\n\n\tif credential_custom_app_fields is not None:\n\t\tcredential_color = credential_custom_app_fields.get(\"ForegroundColor\", \"\")\n\n\tcredential_description = \"\"\n\n\tfor tag in credential[\"Tags\"]:\n\t\ttag_name = tag[\"Name\"]\n\t\tcredential_description += tag_name + \", \"\n\n\tif credential_description.endswith(\", \"):\n\t\tcredential_description = credential_description[:len(credential_description) - 2]\n\n\tcredential = {\n\t\t\"Type\": \"DynamicCredential\",\n\t\t\"ID\": credential_id,\n\t\t\"Name\": credential_name,\n\t\t\"Color\": credential_color,\n\t\t\"URL\": credential_url,\n\t\t\"Username\": credential_username,\n\t\t\"Notes\": credential_notes,\n\t\t\"Description\": credential_description,\n\t\t\"CustomProperties\": credential_custom_properties\n\t}\n\n\treturn credential\n\n\ndef create_credential_group(url, headers, credential_group):\n\tfolder_id = credential_group[\"Id\"]\n\tfolder_name = credential_group[\"Name\"]\n\tfolder_notes = convert_notes_to_html(credential_group[\"Notes\"])\n\n\tfolder_objects = []\n\n\tfor sub_credential_group in credential_group[\"Children\"]:\n\t\tfolder_object = create_credential_group(url, headers, sub_credential_group)\n\t\tfolder_objects.append(folder_object)\n\n\tfor credential in credential_group[\"Credentials\"]:\n\t\tcredential_object = create_credential(url, headers, credential)\n\t\tfolder_objects.append(credential_object)\n\n\tfolder = {\n\t\t\"Type\":\t \"Folder\",\n\t\t\"ID\":\t   folder_id,\n\t\t\"Name\":\t folder_name,\n\t\t\"Notes\":\tfolder_notes,\n\t\t\"Objects\":  folder_objects\n\t}\n\n\t# No need to create the root folder\n\tif credential_group[\"ParentId\"] == \"00000000-0000-0000-0000-000000000000\" and folder_name == \"Root\":\n\t\treturn folder_objects\n\n\treturn folder\n\ndef call_token_endpoint(url, body, otp_headers):\n\tprintError = partial(print, file=sys.stderr) # python2 compatibility\n\ttry:\n\t\ttoken_json = requests.post(url + \"/OAuth2/Token\", data=body, verify=False, headers=otp_headers)\n\t\ttoken_json.raise_for_status()\n\t\treturn token_json\n\texcept requests.exceptions.HTTPError as e:\n\t\tif \"X-Pleasant-OTP\" in token_json.headers and token_json.headers[\"X-Pleasant-OTP\"] == \"required\":\n\t\t\treturn token_json\n\t\t\n\t\tif token_json.status_code == 400:\n\t\t\tprintError(\"HTTP Error 400: Bad Request - could be a redundant domain name, try to omit it. Details: \",e)\n\t\telse:\n\t\t\tprintError(\"HTTP Error: \",e)\n\t\tsys.exit(1)\n\texcept requests.exceptions.ConnectionError:\n\t\tprintError(\"Connection failed.\")\n\t\tsys.exit(1)\n\texcept requests.exceptions.Timeout:\n\t\tprintError(\"Connection timeout.\")\n\t\tsys.exit(1)\n\texcept requests.exceptions.RequestException as e:\n\t\tprintError(\"An unknown connection error occurred. Details: \",e)\n\t\tsys.exit(1)\n\ndef get_api_string(version):\n\tapi_string_list = {\n\t\t\"4\": \"/api/v4/rest/credentialgroup/\",\n\t\t\"5\": \"/api/v5/rest/folders/\"\n\t}\n\tapi_string = api_string_list.get(version, \"/api/v5/rest/folders/\")\n\n\treturn api_string\n\ndef get_entries(url, username, password):\n\tprintError = partial(print, file=sys.stderr) # python2 compatibility\n\turllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)\n\n\ttoken_params = {\n\t\t\"grant_type\": \"password\",\n\t\t\"username\": username,\n\t\t\"password\": password\n\t}\n\n\ttoken_json = call_token_endpoint(url, token_params, None)\n\n\tif not token_json.ok:\n\t\tif \"X-Pleasant-OTP\" in token_json.headers and token_json.headers[\"X-Pleasant-OTP\"] == \"required\":\n\t\t\totp_provider = token_json.headers[\"X-Pleasant-OTP-Provider\"]\n\n\t\t\totp_token = show_prompt(\"Enter your OTP for MFA (\" + otp_provider + \"):\")\n\n\t\t\tif not otp_token:\n\t\t\t\tprintError(\"No token for MFA provided\")\n\t\t\t\treturn \"\"\n\n\t\t\totp_headers = {\n\t\t\t\t\"X-Pleasant-OTP-Provider\": otp_provider,\n\t\t\t\t\"X-Pleasant-OTP\": otp_token\n\t\t\t}\n\n\t\t\ttoken_json = call_token_endpoint(url, token_params, otp_headers)\n\t\telse:\n\t\t\tprintError(\"An unknown error occurred (could be redundant domain name, try to omit it).\")\n\t\t\treturn \"\"\n\n\ttoken = json.loads(token_json.content)[\"access_token\"]\n\n\theaders = {\n\t\t\"Accept\": \"application/json\",\n\t\t\"Authorization\": token\n\t}\n\t\n\tapi_string = get_api_string(r\"$CustomProperty.APIVersion$\")\n\t\n\tcredential_groups_json = requests.get(url + api_string, headers=headers, verify=False)\n\tcredential_groups = json.loads(credential_groups_json.content)\n\n\tstore_objects = []\n\n\tif credential_groups is not list:\n\t\tcredential_groups = [credential_groups]\n\n\tfor credentialGroup in credential_groups:\n\t\tfolder = create_credential_group(url, headers, credentialGroup)\n\t\tstore_objects.extend(folder)\n\n\tstore = {\n\t\t\"Objects\": store_objects\n\t}\n\n\tstore_json = json.dumps(store)\n\n\treturn store_json\n\nif r\"$CustomProperty.OmitDomain$\" == \"Yes\":\n\tprint(get_entries(r\"$CustomProperty.ServerURL$\", r\"$EffectiveUsernameWithoutDomain$\", r\"$EffectivePassword$\"))\nelse:\n\tprint(get_entries(r\"$CustomProperty.ServerURL$\", r\"$EffectiveUsername$\", r\"$EffectivePassword$\"))",
      "ScriptInterpreter": "python",
      "DynamicCredentialScriptInterpreter": "python",
      "DynamicCredentialScript": "from __future__ import print_function\nimport sys\nfrom functools import partial\nimport json\nimport requests\nimport urllib3\n\ntry:\n\t# for Python2\n\tfrom Tkinter import * \nexcept ImportError:\n\t# for Python3\n\tfrom tkinter import *\n\nclass TakeInput(object):\n\tdef __init__(self, request_message):\n\t\tself.root = Tk()\n\n\t\ttitle = \"\"\n\n\t\tif request_message:\n\t\t\ttitle = request_message\n\t\t\t\n\t\t\tif title.endswith(\":\"):\n\t\t\t\ttitle = title[:-1]\n\n\t\tself.root.title(title)\n\n\t\t# Do not allow the user to resize the window\n\t\tself.root.resizable(False, False)\n\t\t\n\t\tself.string = \"\"\n\n\t\tself.frame = Frame(self.root)\n\n\t\tself.acceptInput(request_message)\n\t\tself.frame.pack(padx=17, pady=17)\n\n\tdef acceptInput(self, request_message):\n\t\tr = self.frame\n\n\t\ticon = Label(r, text=\"\", image=\"::tk::icons::question\")\n\t\ticon.grid(row=0, column=0, rowspan=2, sticky=\"w\")\n\n\t\tlabel = Label(r, text=request_message)\n\t\tlabel.grid(row=0, column=1, padx=(9, 0), sticky=\"nw\")\n\t\t\n\t\tself.e = Entry(r, text='Name')\n\t\tself.e.grid(row=1, column=1, padx=(13, 0), sticky=\"nw\")\n\t\tself.e.configure(width=30)\n\t\tself.e.focus_set()\n\n\t\tb = Button(r, text='        OK        ', command=self.gettext)\n\t\tb.grid(row=2, column=1, sticky=\"ne\", pady=(10, 0))\n\t\t\n\t\tself.root.bind('<Return>', self.gettext)\n\n\tdef gettext(self, event=None):\n\t\tself.string = self.e.get()\n\t\tself.root.destroy()\n\n\tdef getString(self):\n\t\treturn self.string\n\t\n\tdef configureWindowGeometry(self):\n\t\t# Get the window size\n\t\twindow_width = self.root.winfo_width()\n\t\twindow_height = self.root.winfo_height()\n\n\t\t# Get the screen size\n\t\tscreen_width = self.root.winfo_screenwidth()\n\t\tscreen_height = self.root.winfo_screenheight()\n\n\t\t# Get the window position from the top dynamically as well as position from left or right as follows\n\t\tposition_top = int((screen_height / 2) - (window_height / 2))\n\t\tposition_right = int((screen_width / 2) - (window_width / 2))\n\n\t\t# Shift up by a couple of pixels to account for the title bar\n\t\tposition_top -= 30\n\n\t\t# This will center the window\n\t\tself.root.geometry(str(window_width) + \"x\" + str(window_height) + \"+\" + str(position_right) + \"+\" + str(position_top))\n\n\tdef waitForInput(self):\n\t\tself.root.lift()\n\n\t\tself.root.attributes('-topmost', True)\n\t\tself.root.after_idle(self.root.attributes, '-topmost', False)\n\n\t\t# Ensure that layout is ready\n\t\tself.root.update_idletasks()\n\n\t\tself.configureWindowGeometry()\n\n\t\tself.root.mainloop()\n\ndef show_prompt(request_message):\n\tmsg_box = TakeInput(request_message)\n\n\t# loop until the user makes a decision and the window is destroyed\n\tmsg_box.waitForInput()\n\n\treturn msg_box.getString()\n\n\ndef call_token_endpoint(url, body, otp_headers):\n\tprintError = partial(print, file=sys.stderr) # python2 compatibility\n\ttry:\n\t\ttoken_json = requests.post(url + \"/OAuth2/Token\", data=body, verify=False, headers=otp_headers)\n\t\ttoken_json.raise_for_status()\n\t\treturn token_json\n\texcept requests.exceptions.HTTPError as e:\n\t\tif \"X-Pleasant-OTP\" in token_json.headers and token_json.headers[\"X-Pleasant-OTP\"] == \"required\":\n\t\t\treturn token_json\n\t\t\n\t\tif token_json.status_code == 400:\n\t\t\tprintError(\"HTTP Error 400: Bad Request - could be a redundant domain name, try to omit it. Details: \",e)\n\t\telse:\n\t\t\tprintError(\"HTTP Error: \",e)\n\t\tsys.exit(1)\n\texcept requests.exceptions.ConnectionError:\n\t\tprintError(\"Connection failed.\")\n\t\tsys.exit(1)\n\texcept requests.exceptions.Timeout:\n\t\tprintError(\"Connection timeout.\")\n\t\tsys.exit(1)\n\texcept requests.exceptions.RequestException as e:\n\t\tprintError(\"An unknown connection error occurred. Details: \",e)\n\t\tsys.exit(1)\n\ndef get_api_string(version):\n\tapi_string_list = {\n\t\t\"4\": \"/api/v4/rest/credential/\",\n\t\t\"5\": \"/api/v5/rest/entries/\"\n\t}\n\tapi_string = api_string_list.get(version, \"/api/v5/rest/entries\")\n\n\treturn api_string\n\ndef get_dynamic_credential(url, username, password, credential_id):\n\tprintError = partial(print, file=sys.stderr) # python2 compatibility\n\turllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)\n\n\ttoken_params = {\n\t\t\"grant_type\": \"password\",\n\t\t\"username\": username,\n\t\t\"password\": password\n\t}\n\n\ttoken_json = call_token_endpoint(url, token_params, None)\n\n\tif not token_json.ok:\n\t\tif \"X-Pleasant-OTP\" in token_json.headers and token_json.headers[\"X-Pleasant-OTP\"] == \"required\":\n\t\t\totp_provider = token_json.headers[\"X-Pleasant-OTP-Provider\"]\n\n\t\t\totp_token = show_prompt(\"Enter your OTP for MFA (\" + otp_provider + \"):\")\n\n\t\t\tif not otp_token:\n\t\t\t\tprintError(\"No token for MFA provided\")\n\t\t\t\treturn \"\"\n\n\t\t\totp_headers = {\n\t\t\t\t\"X-Pleasant-OTP-Provider\": otp_provider,\n\t\t\t\t\"X-Pleasant-OTP\": otp_token\n\t\t\t}\n\n\t\t\ttoken_json = call_token_endpoint(url, token_params, otp_headers)\n\t\telse:\n\t\t\tprintError(\"An unknown error occurred (could be redundant domain name, try to omit it).\")\n\t\t\treturn \"\"\n\n\ttoken = json.loads(token_json.content)[\"access_token\"]\n\n\theaders = {\n\t\t\"Accept\": \"application/json\",\n\t\t\"Authorization\": token\n\t}\n\n\tapi_string = get_api_string(r\"$CustomProperty.APIVersion$\")\n\t\n\tcredential_password_json = requests.get(url + api_string + credential_id + \"/password\", headers=headers, verify=False)\n\tcredential_password = json.loads(credential_password_json.content)\n\n\tcredential = {\n\t\t\"Password\": credential_password\n\t}\n\n\tcredential_json = json.dumps(credential)\n\n\treturn credential_json\n\nif r\"$CustomProperty.OmitDomain$\" == \"Yes\":\n\tprint(get_dynamic_credential(r\"$CustomProperty.ServerURL$\", r\"$EffectiveUsernameWithoutDomain$\", r\"$EffectivePassword$\", r\"$DynamicCredential.EffectiveID$\"))\nelse:\n\tprint(get_dynamic_credential(r\"$CustomProperty.ServerURL$\", r\"$EffectiveUsername$\", r\"$EffectivePassword$\", r\"$DynamicCredential.EffectiveID$\"))"
    }
  ]
}