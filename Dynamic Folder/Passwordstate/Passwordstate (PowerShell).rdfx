<DynamicFolderExport>
    <Name>Dynamic Folder Export</Name>
    <Objects>
        <DynamicFolderExportObject>
            <Type>DynamicFolder</Type>
            <Name>Passwordstate (PowerShell)</Name>
            <Description>This Dynamic Folder sample for Passwordstate supports Dynamic Credentials or regular credentials.</Description>
            <Notes><![CDATA[<h2><strong>Dynamic Folder sample for Passwordstate</strong></h2>

<p><strong>Version</strong>: 1.0.0<br />
<strong>Author</strong>: Royal Apps</p>

<p>This Dynamic Folder sample for Passwordstate supports Dynamic Credentials and regular credentials.</p>

<h3><strong>Requirements</strong></h3>

<ul>
	<li>This script has only been tested with&nbsp;PowerShell Core 6.x. If you&#39;re using an older version, adjustments might be necessary.</li>
</ul>

<h3><strong>Setup</strong></h3>

<ul>
	<li>Enter your &quot;<strong>Server URL</strong>&quot; in the &quot;Custom Properties&quot; section. (ie.&nbsp;<em>https://passwordstatehost:9119</em>)</li>
	<li>If you&#39;re using an <strong>untrusted SSL</strong> certificate on your server, set <strong>Skip Certificate Check</strong> to &quot;Yes&quot;.</li>
	<li>Assign a&nbsp;credential to the dynamic folder which contains the following information:
	<ul>
		<li><strong>Username</strong>: Either leave the username blank if you&#39;re using a system-wide API key and want to retrieve all credentials&nbsp;or enter the ID of the password list you want to retrieve.</li>
		<li><strong>Password</strong>: Enter your Passwordstate&nbsp;API key.</li>
	</ul>
	</li>
	<li>By default, the dynamic folder script generates<strong> dynamic credentials</strong>. If you want to use <strong>regular credentials</strong> instead, edit the last line of the dynamic folder script and change <span style="font-family:courier new,courier,monospace;">-createDynamicCredential $true</span> to&nbsp;<span style="font-family:courier new,courier,monospace;">-createDynamicCredential $false</span>.</li>
</ul>
]]></Notes>
            <CustomProperties>
                <CustomProperty>
                    <Name>Server URL</Name>
                    <Type>URL</Type>
                    <Value>TODO</Value>
                </CustomProperty>
                <CustomProperty>
                    <Name>Skip Certificate Check</Name>
                    <Type>YesNo</Type>
                    <Value>False</Value>
                </CustomProperty>
            </CustomProperties>
            <ScriptInterpreter>powershell</ScriptInterpreter>
            <Script><![CDATA[$ErrorActionPreference = "Stop"

function Get-Credential ($passwordObject, $createDynamicCredential) {
    $credentialID = $passwordObject.PasswordID
	$credentialName = $passwordObject.Title
	$username = ""
	$password = ""
	$url = $passwordObject.URL
	$notes = $passwordObject.Notes

	$folderPath = ""
	
	if ($passwordObject.TreePath) {
		$folderPath = $passwordObject.TreePath
	}

	if ($passwordObject.PasswordList) {
		$folderPath += "\" + $passwordObject.PasswordList
	}

	$folderPath = $folderPath.TrimStart([char]'\').Trim()

	$objectType = "Credential"

	if ($createDynamicCredential) {
		$objectType = "DynamicCredential"
	} else {
		$username = $passwordObject.UserName
		$password = $passwordObject.Password
	}
    
    $credential = New-Object pscustomobject -Property @{
        "Type" = $objectType;
        "ID" = $credentialID;
        "Name" = $credentialName;
		"Path" = $folderPath;
		"Username" = $username;
		"Password" = $password;
		"URL" = $url;
		"Notes" = $notes;
    }

    return $credential
}

function Get-Entries($url, $apiKey, $passwordListID, $preventAuditing, $createDynamicCredential, $skipCertificateCheck) {
	$api = "$url/api"
	
    $headers = @{
        "APIKey" = $apiKey
	}

	$passwordsBasePath = "/passwords/"

	$queryAllParam = "QueryAll"

	$preventAuditingParam = "PreventAuditing=false"

	if ($preventAuditing) {
		$preventAuditingParam = "PreventAuditing=true"
	}
	
	if ($passwordListID -gt -1) {
		$urlPasswords = $api + $passwordsBasePath + $passwordListID + "?" + $queryAllParam + "&" + $preventAuditingParam
	} else {
		$urlPasswords = $api + $passwordsBasePath + "?" + $queryAllParam + "&" + $preventAuditingParam
	}
	
	$webRequestParams = @{}

	if ($skipCertificateCheck) {
		$webRequestParams["-SkipCertificateCheck"] = $true
	}

	$passwordObjectsJSON = Invoke-WebRequest -Uri $urlPasswords -Headers $headers @webRequestParams
	$passwordObjects = (ConvertFrom-Json $passwordObjectsJSON.Content)
	
	$storeObjects = @()

	ForEach ($passwordObject in $passwordObjects) {
		$credential = Get-Credential -passwordObject $passwordObject -createDynamicCredential $createDynamicCredential
		
		$storeObjects += $credential
	}
	
	$store = New-Object pscustomobject -Property @{
        "Objects" = $storeObjects;
    }

	$storeJSON = (ConvertTo-Json -InputObject $store -Depth 100)

    $storeJSON
}

$baseURL = "$CustomProperty.ServerURL$"
$apiKey = "$EffectivePassword$"
$passwordListID = "$EffectiveUsername$"
$skipCertificateCheck = "$CustomProperty.SkipCertificateCheck$" -like "yes"

Get-Entries -url $baseURL -apiKey $apiKey -passwordListID $passwordListID -preventAuditing $false -createDynamicCredential $true -skipCertificateCheck $skipCertificateCheck]]></Script>
            <DynamicCredentialScriptInterpreter>powershell</DynamicCredentialScriptInterpreter>
            <DynamicCredentialScript><![CDATA[$ErrorActionPreference = "Stop"

function Get-DynamicCredential-Result ($passwordObject) {
	$username = $passwordObject.UserName
	$password = $passwordObject.Password

	$result = New-Object pscustomobject -Property @{
		"Username" = $username;
		"Password" = $password;
	}
	
	return $result
}

function Get-Password($url, $apiKey, $passwordID, $preventAuditing, $skipCertificateCheck) {
	$api = "$url/api"
	
    $headers = @{
        "APIKey" = $apiKey
	}

	$passwordsBasePath = "/passwords/"

	$preventAuditingParam = "PreventAuditing=false"

	if ($preventAuditing) {
		$preventAuditingParam = "PreventAuditing=true"
	}
	
	$urlPassword = $api + $passwordsBasePath + $passwordID + "?" + $preventAuditingParam
	
	$webRequestParams = @{}

	if ($skipCertificateCheck) {
		$webRequestParams["-SkipCertificateCheck"] = $true
	}

	$passwordObjectJSON = Invoke-WebRequest -Uri $urlPassword -Headers $headers @webRequestParams
	$passwordObject = (ConvertFrom-Json $passwordObjectJSON.Content)

	$credentialResult = Get-DynamicCredential-Result -passwordObject $passwordObject

	$credentialResultJSON = (ConvertTo-Json -InputObject $credentialResult -Depth 100)

    $credentialResultJSON
}

$baseURL = "$CustomProperty.ServerURL$"
$apiKey = "$EffectivePassword$"
$passwordID = "$DynamicCredential.EffectiveID$"
$skipCertificateCheck = "$CustomProperty.SkipCertificateCheck$" -like "yes"

Get-Password -url $baseURL -apiKey $apiKey -passwordID $passwordID -preventAuditing $false -skipCertificateCheck $skipCertificateCheck]]></DynamicCredentialScript>
        </DynamicFolderExportObject>
    </Objects>
</DynamicFolderExport>