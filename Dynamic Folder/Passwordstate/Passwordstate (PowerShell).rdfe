{
  "Name": "Dynamic Folder Export",
  "Objects": [
    {
      "Type": "DynamicFolder",
      "Name": "Passwordstate (PowerShell)",
      "Description": "This Dynamic Folder sample for Passwordstate supports Dynamic Credentials or regular credentials.",
      "Notes": "<h2><strong>Dynamic Folder sample for Passwordstate</strong></h2>\n\n<p><strong>Version</strong>: 1.0.0<br />\n<strong>Author</strong>: Royal Apps</p>\n\n<p>This Dynamic Folder sample for Passwordstate supports Dynamic Credentials and regular credentials.</p>\n\n<h3><strong>Requirements</strong></h3>\n\n<ul>\n\t<li>This script has only been tested with&nbsp;PowerShell Core 6.x. If you&#39;re using an older version, adjustments might be necessary.</li>\n</ul>\n\n<h3><strong>Setup</strong></h3>\n\n<ul>\n\t<li>Enter your &quot;<strong>Server URL</strong>&quot; in the &quot;Custom Properties&quot; section. (ie.&nbsp;<em>https://passwordstatehost:9119</em>)</li>\n\t<li>If you&#39;re using an <strong>untrusted SSL</strong> certificate on your server, set <strong>Skip Certificate Check</strong> to &quot;Yes&quot;.</li>\n\t<li>Assign a&nbsp;credential to the dynamic folder which contains the following information:\n\t<ul>\n\t\t<li><strong>Username</strong>: Either leave the username blank if you&#39;re using a system-wide API key and want to retrieve all credentials&nbsp;or enter the ID of the password list you want to retrieve.</li>\n\t\t<li><strong>Password</strong>: Enter your Passwordstate&nbsp;API key.</li>\n\t</ul>\n\t</li>\n\t<li>By default, the dynamic folder script generates<strong> dynamic credentials</strong>. If you want to use <strong>regular credentials</strong> instead, edit the last line of the dynamic folder script and change <span style=\"font-family:courier new,courier,monospace;\">-createDynamicCredential $true</span> to&nbsp;<span style=\"font-family:courier new,courier,monospace;\">-createDynamicCredential $false</span>.</li>\n</ul>\n",
      "CustomProperties": [
        {
          "Name": "Server URL",
          "Type": "URL",
          "Value": "TODO"
        },
        {
          "Name": "Skip Certificate Check",
          "Type": "YesNo",
          "Value": "False"
        }
      ],
      "ScriptInterpreter": "powershell",
      "DynamicCredentialScriptInterpreter": "powershell",
      "DynamicCredentialScript": "$ErrorActionPreference = \"Stop\"\n\nfunction Get-DynamicCredential-Result ($passwordObject) {\n\t$username = $passwordObject.UserName\n\t$password = $passwordObject.Password\n\n\t$result = New-Object pscustomobject -Property @{\n\t\t\"Username\" = $username;\n\t\t\"Password\" = $password;\n\t}\n\t\n\treturn $result\n}\n\nfunction Get-Password($url, $apiKey, $passwordID, $preventAuditing, $skipCertificateCheck) {\n\t$api = \"$url/api\"\n\t\n    $headers = @{\n        \"APIKey\" = $apiKey\n\t}\n\n\t$passwordsBasePath = \"/passwords/\"\n\n\t$preventAuditingParam = \"PreventAuditing=false\"\n\n\tif ($preventAuditing) {\n\t\t$preventAuditingParam = \"PreventAuditing=true\"\n\t}\n\t\n\t$urlPassword = $api + $passwordsBasePath + $passwordID + \"?\" + $preventAuditingParam\n\t\n\t$webRequestParams = @{}\n\n\tif ($skipCertificateCheck) {\n\t\t$webRequestParams[\"-SkipCertificateCheck\"] = $true\n\t}\n\n\t$passwordObjectJSON = Invoke-WebRequest -Uri $urlPassword -Headers $headers @webRequestParams\n\t$passwordObject = (ConvertFrom-Json $passwordObjectJSON.Content)\n\n\t$credentialResult = Get-DynamicCredential-Result -passwordObject $passwordObject\n\n\t$credentialResultJSON = (ConvertTo-Json -InputObject $credentialResult -Depth 100)\n\n    $credentialResultJSON\n}\n\n$baseURL = \"$CustomProperty.ServerURL$\"\n$apiKey = \"$EffectivePassword$\"\n$passwordID = \"$DynamicCredential.EffectiveID$\"\n$skipCertificateCheck = \"$CustomProperty.SkipCertificateCheck$\" -like \"yes\"\n\nGet-Password -url $baseURL -apiKey $apiKey -passwordID $passwordID -preventAuditing $false -skipCertificateCheck $skipCertificateCheck",
      "Script": "$ErrorActionPreference = \"Stop\"\n\nfunction Get-Credential ($passwordObject, $createDynamicCredential) {\n    $credentialID = $passwordObject.PasswordID\n\t$credentialName = $passwordObject.Title\n\t$username = \"\"\n\t$password = \"\"\n\t$url = $passwordObject.URL\n\t$notes = $passwordObject.Notes\n\n\t$folderPath = \"\"\n\t\n\tif ($passwordObject.TreePath) {\n\t\t$folderPath = $passwordObject.TreePath\n\t}\n\n\tif ($passwordObject.PasswordList) {\n\t\t$folderPath += \"\\\" + $passwordObject.PasswordList\n\t}\n\n\t$folderPath = $folderPath.TrimStart([char]'\\').Trim()\n\n\t$objectType = \"Credential\"\n\n\tif ($createDynamicCredential) {\n\t\t$objectType = \"DynamicCredential\"\n\t} else {\n\t\t$username = $passwordObject.UserName\n\t\t$password = $passwordObject.Password\n\t}\n    \n    $credential = New-Object pscustomobject -Property @{\n        \"Type\" = $objectType;\n        \"ID\" = $credentialID;\n        \"Name\" = $credentialName;\n\t\t\"Path\" = $folderPath;\n\t\t\"Username\" = $username;\n\t\t\"Password\" = $password;\n\t\t\"URL\" = $url;\n\t\t\"Notes\" = $notes;\n    }\n\n    return $credential\n}\n\nfunction Get-Entries($url, $apiKey, $passwordListID, $preventAuditing, $createDynamicCredential, $skipCertificateCheck) {\n\t$api = \"$url/api\"\n\t\n    $headers = @{\n        \"APIKey\" = $apiKey\n\t}\n\n\t$passwordsBasePath = \"/passwords/\"\n\n\t$queryAllParam = \"QueryAll\"\n\n\t$preventAuditingParam = \"PreventAuditing=false\"\n\n\tif ($preventAuditing) {\n\t\t$preventAuditingParam = \"PreventAuditing=true\"\n\t}\n\t\n\tif ($passwordListID -gt -1) {\n\t\t$urlPasswords = $api + $passwordsBasePath + $passwordListID + \"?\" + $queryAllParam + \"&\" + $preventAuditingParam\n\t} else {\n\t\t$urlPasswords = $api + $passwordsBasePath + \"?\" + $queryAllParam + \"&\" + $preventAuditingParam\n\t}\n\t\n\t$webRequestParams = @{}\n\n\tif ($skipCertificateCheck) {\n\t\t$webRequestParams[\"-SkipCertificateCheck\"] = $true\n\t}\n\n\t$passwordObjectsJSON = Invoke-WebRequest -Uri $urlPasswords -Headers $headers @webRequestParams\n\t$passwordObjects = (ConvertFrom-Json $passwordObjectsJSON.Content)\n\t\n\t$storeObjects = @()\n\n\tForEach ($passwordObject in $passwordObjects) {\n\t\t$credential = Get-Credential -passwordObject $passwordObject -createDynamicCredential $createDynamicCredential\n\t\t\n\t\t$storeObjects += $credential\n\t}\n\t\n\t$store = New-Object pscustomobject -Property @{\n        \"Objects\" = $storeObjects;\n    }\n\n\t$storeJSON = (ConvertTo-Json -InputObject $store -Depth 100)\n\n    $storeJSON\n}\n\n$baseURL = \"$CustomProperty.ServerURL$\"\n$apiKey = \"$EffectivePassword$\"\n$passwordListID = \"$EffectiveUsername$\"\n$skipCertificateCheck = \"$CustomProperty.SkipCertificateCheck$\" -like \"yes\"\n\nGet-Entries -url $baseURL -apiKey $apiKey -passwordListID $passwordListID -preventAuditing $false -createDynamicCredential $true -skipCertificateCheck $skipCertificateCheck"
    }
  ]
}