<DynamicFolderExport>
  <Name>Dynamic Folder Export</Name>
  <Objects>
    <DynamicFolderExportObject>
      <Type>DynamicFolder</Type>
      <Name>lemon Bitwarden (PowerShell)</Name>
      <Description>This Dynamic Folder sample allows you to import credentials from Bitwarden using Powershell.</Description>
      <Notes><![CDATA[<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
<title></title>
<style type="text/css">.csB8AC2BC8{text-align:left;text-indent:0pt;margin:0pt 0pt 0pt 0pt}
			.csCE67CBC9{color:#000000;background-color:transparent;font-family:Calibri;font-size:11pt;font-weight:normal;font-style:normal;}
			.cs8A3D3EFA{color:#000000;background-color:transparent;font-family:'Times New Roman';font-size:18pt;font-weight:bold;font-style:normal;}
			.cs32D317EB{text-align:left;text-indent:0pt;margin:12pt 0pt 12pt 0pt}
			.csD05B7528{color:#000000;background-color:transparent;font-family:'Times New Roman';font-size:12pt;font-weight:bold;font-style:normal;}
			.csD599CF66{color:#000000;background-color:transparent;font-family:'Times New Roman';font-size:12pt;font-weight:normal;font-style:normal;}
			.cs3785182E{color:#000000;background-color:transparent;font-family:'Times New Roman';font-size:12pt;font-weight:normal;font-style:normal;text-decoration: none;}
			.cs5E4473C3{color:#0000FF;background-color:transparent;font-family:'Times New Roman';font-size:12pt;font-weight:normal;font-style:normal;text-decoration: underline;}
			.cs73206D29{color:#000000;background-color:transparent;font-family:'Times New Roman';font-size:13.5pt;font-weight:bold;font-style:normal;}
			.cs6B0FFF63{text-align:left;margin:0pt 0pt 0pt 0pt;list-style-type:disc;color:#000000;background-color:transparent;font-family:Arial;font-size:12pt;font-weight:normal;font-style:normal}
			.csC22FCEB2{text-align:left;margin:0pt 0pt 0pt 0pt;list-style-type:circle;color:#000000;background-color:transparent;font-family:'Courier New';font-size:12pt;font-weight:normal;font-style:normal}
			.csE1537053{color:#000000;background-color:transparent;font-family:Arial;font-size:12pt;font-weight:normal;font-style:normal;}
			.csB67336A5{text-align:left;text-indent:-18pt;margin:0pt 0pt 0pt 36pt}
			.csD08E4B8C{color:#C00000;background-color:transparent;font-family:'Times New Roman';font-size:13.5pt;font-weight:bold;font-style:normal;text-decoration: underline;}
</style>
<h2 class="csB8AC2BC8"><span class="csCE67CBC9">&nbsp;</span><span class="cs8A3D3EFA">Bitwarden Dynamic Folder sample with Powershell</span></h2>

<p class="cs32D317EB"><span class="csD05B7528">Version</span><span class="csD599CF66">: 1.0.1</span><br />
<span class="csD05B7528">Author</span><span class="csD599CF66">: Nicolas Grimler</span></p>

<p class="cs32D317EB"><span class="csD599CF66">This Dynamic Folder sample allows you to import credentials from Bitwarden. The Bitwarden CLI client is required and the full executable path where it is installed must be configured in the &quot;Custom Properties&quot; section. Also, your Bitwarden login details must be provided in the &quot;Credentials&quot; section.</span></p>

<p class="cs32D317EB"><span class="csD599CF66">It use the Bitwarden User API to login and the master password to unlock the vault. Please read <a class="cs3785182E" href="https://bitwarden.com/help/personal-api-key/"><span class="cs5E4473C3">https://bitwarden.com/help/personal-api-key/</span></a></span><span class="csD599CF66"> to know how to get your personal API Key.<br />
If you don&#39;t want to use an API Key, please ensure that you are already logged in using the bw.exe CLI tool as the script will not handle the TOTP 2FA handshake.</span></p>

<p class="cs32D317EB"><span class="csD599CF66">At the moment, only credentials and secure notes are collected. The folder structure is as presented in Bitwarden (Folder, Folder/Subfolder, ...). Support for full directory structure may be implemented in future version.</span></p>

<h3 class="csB8AC2BC8"><span class="cs73206D29">Requirements</span></h3>

<ul style="margin-top:0;margin-bottom:0;">
	<li class="cs6B0FFF63"><span class="csD599CF66"><a class="cs3785182E" href="https://help.bitwarden.com/article/cli"><span class="cs5E4473C3">Bitwarden command-line tool (CLI)</span></a></span></li>
	<li class="cs6B0FFF63"><span class="csD599CF66">PowerShell, either:</span>
	<ul style="margin-top:0;margin-bottom:0;">
		<li class="csC22FCEB2"><span class="csD599CF66">Legacy PowerShell (version 5.1 as standard Windows installation)</span></li>
		<li class="csC22FCEB2"><span class="csD599CF66">PowerShell Core (6.x and later) available in <a class="cs3785182E" href="https://apps.microsoft.com/store/detail/powershell/9MZ1SNWT0N5D?hl=en-us&amp;gl=us"><span class="cs5E4473C3">Microsoft Store</span></a></span><span class="csD599CF66"> or <a class="cs3785182E" href="https://github.com/PowerShell/PowerShell"><span class="cs5E4473C3">GitHub</span></a></span></li>
	</ul>
	</li>
</ul>

<p class="csB8AC2BC8"><span class="csE1537053">&nbsp;</span></p>

<h3 class="csB8AC2BC8"><span class="cs73206D29">Setup</span></h3>

<ul style="margin-top:0;margin-bottom:0;">
	<li class="cs6B0FFF63"><span class="csD599CF66">Specify the full, absolute path to the Bitwarden CLI tool in the &quot;Custom Properties&quot; section.</span></li>
	<li class="cs6B0FFF63"><span class="csD599CF66">Specify your server URL if on-premise instance, or offical Bitwarden URL</span></li>
	<li class="cs6B0FFF63"><span class="csD599CF66">Specify your ClientID &amp; ClientSecret for the API</span></li>
	<li class="cs6B0FFF63"><span class="csD599CF66">Specify you master password to unlock the vault</span></li>
</ul>

<p class="csB67336A5"><span class="csD599CF66">&nbsp;</span></p>

<p class="csB8AC2BC8"><span class="csD08E4B8C">Important note:</span></p>

<p class="csB8AC2BC8"><span class="csD599CF66">In the configuration of the interpreter used to run the script, </span><span class="csD05B7528">check</span><span class="csD599CF66"> the box &quot;Do not load the PowerShell profile&quot; as it may otherwise add unwanted messages invalidating the JSON output and causing errors.</span></p>
]]></Notes>
      <CustomProperties>
        <CustomProperty>
          <Name>Bitwarden CLI Configuration</Name>
          <Type>Header</Type>
          <Value />
        </CustomProperty>
        <CustomProperty>
          <Name>BitWarden CLI Executable</Name>
          <Type>Text</Type>
          <Value>TODO</Value>
        </CustomProperty>
        <CustomProperty>
          <Name>BitWarden Server URL</Name>
          <Type>URL</Type>
          <Value>TODO</Value>
        </CustomProperty>
        <CustomProperty>
          <Name>API Client ID</Name>
          <Type>Protected</Type>
          <Value>TODO</Value>
        </CustomProperty>
        <CustomProperty>
          <Name>API Client Secret</Name>
          <Type>Protected</Type>
          <Value>TODO</Value>
        </CustomProperty>
        <CustomProperty>
          <Name>Account Password</Name>
          <Type>Protected</Type>
          <Value>TODO</Value>
        </CustomProperty>
      </CustomProperties>
      <ScriptInterpreter>powershell</ScriptInterpreter>
      <Script><![CDATA[# Env config
$global:OutputEncoding = New-Object Text.Utf8Encoding -ArgumentList (,$false) # BOM-less
[Console]::OutputEncoding = $global:OutputEncoding
$PSStyle.OutputRendering = 'PlainText'

# Bitwarden access config
$Bitwarden = ( New-Object PSObject |
  Add-Member -PassThru NoteProperty exec_path '$CustomProperty.BitWardenCLIExecutable$' |
  Add-Member -PassThru NoteProperty serverUrl '$CustomProperty.BitWardenServerURL$' |
  Add-Member -PassThru NoteProperty clientId '$CustomProperty.APIClientID$' |
  Add-Member -PassThru NoteProperty clientSecret '$CustomProperty.APIClientSecret$' |
  Add-Member -PassThru NoteProperty password '$CustomProperty.AccountPassword$' |
  Add-Member -PassThru NoteProperty session '' )

# Check bw.exe path validity
if (!(Test-Path -Path "$($Bitwarden.exec_path)" -PathType Leaf)) {
  Write-Error -Message "Bitwarden CLI utility not found at specified path. Please check CLI utility path in Custom Properties." -ErrorAction Stop
}

# Structures
$final = @{ Objects = @(@{ Type = "Folder"; ID = "personal"; Name = "Personal Vault"; IconName = "Flat/Objects/User Record"; Objects = @(); }); }

# Functions
function Get-VaultItems {
  [CmdletBinding()]
  param (
    [Parameter(Mandatory=$false)]
    [string]$folderId = "",
    [Parameter(Mandatory=$false)]
    [string]$collectionId = ""
  )

  if ($folderId -eq "" -and $collectionId -eq "") { Write-Error -Message "Folder ID or Collection ID needed, none provided." -ErrorAction Stop }

  if ($folderId -ne "" -and $collectionId -eq "") {
    $tmpItems = (Invoke-Command -ScriptBloc { & "$($Bitwarden.exec_path)" list items --folderid $folderId --session "$($Bitwarden.session)"}) | ConvertFrom-Json
  } elseif ($folderId -eq "" -and $collectionId -ne "") {
    $tmpItems = (Invoke-Command -ScriptBloc { & "$($Bitwarden.exec_path)" list items --collectionid $collectionId --session "$($Bitwarden.session)"}) | ConvertFrom-Json
  } else {
    Write-Error -Message "Either FolderId or CollectionId are needed, not both." -ErrorAction Stop
  }
  $items = [array]@()
  foreach ($item in $tmpItems) {
    # Skip shared items with an organization to prevent duplicates
    if ($folderid -ne "" -and $null -ne $item.organizationid) { continue }

    # Parse item of type Login/Secure Note only
    switch ($item.type) {
      "1" { # Login
        $row = "" | Select-Object Type,ID,Name,Notes,Favorite,Username,Password,URL,CustomProperties
        $row.Type = "Credential"
        $row.ID = $item.id
        $row.Name = $item.name
        if ($null -ne $item.notes) {
          $row.Notes = $item.notes.Replace("`r`n", "<br />").Replace("`r", "<br />").Replace("`n", "<br />")
        }
        if ($item.favorite -eq "true") { $row.Favorite = $true } else { $row.Favorite = $false }
        $row.Username = $item.login.username
        $row.Password = $item.login.password
        if ($item.login.uris.Count -gt 0) {
          $row.URL = $item.login.uris[0].uri
        }
        $row.CustomProperties = [array]@()
        if ($item.fields.count -gt 0) {
          $itemFields = [array]@()
          $fieldIndex = 0
          foreach ($field in $item.fields) {
            $frow = "" | Select-Object Type,Name,Value
            switch ($field.type) {
              "0" { $frow.Type = "Text" }
              "1" { $frow.Type = "Protected" }
              "2" { $frow.Type = "YesNo" }
            }
			if ($null -eq $frow.Type) {
			  continue
			}
            if ($null -eq $field.name) {
              $frow.Name = "UnnamedField$($fieldIndex)"
              $fieldIndex++
            } else {
              $frow.Name = $field.name
            }
			
			$frow.Value = $field.value

            $itemFields += $frow
          }
          
          $row.CustomProperties = $itemFields
        }
        $items += $row
      }
      "2" { # Secure Note
        $row = "" | Select-Object Type,ID,Name,Notes,TemplateID,CustomProperties
        $row.Type = "Information"
        $row.ID = $item.id
        $row.Name = $item.name
        if ($null -ne $item.notes) {
          $row.Notes = $item.notes.Replace("`r`n", "<br />").Replace("`r", "<br />").Replace("`n", "<br />")
        }
        $row.TemplateID = "Custom"
        $row.CustomProperties = @()
        $itemFields = [array]@()
        if ($item.fields.count -gt 0) {
          $fieldIndex = 0
          foreach ($field in $item.fields) {
            $frow = "" | Select-Object Type,Name,Value
            switch ($field.type) {
              "0" { $frow.Type = "Text" }
              "1" { $frow.Type = "Protected" }
              "2" { $frow.Type = "YesNo" }
            }
			if ($null -eq $frow.Type) {
			  continue
			}
            if ($null -eq $field.name) {
              $frow.Name = "UnnamedField$($fieldIndex)"
              $fieldIndex++
            } else {
              $frow.Name = $field.name
            }
			
			$frow.Value = $field.value

            $itemFields += $frow
          }
        } else {
          $itemFields += @{ Type = "Header"; Name = "See notes for details"; Value = ""; }
        }
        $row.CustomProperties = $itemFields
        $items += $row
      }
    }
  }

  return $items
}

# Get Vault status
$status = (Invoke-Command -ScriptBloc { & "$($Bitwarden.exec_path)" status }) | ConvertFrom-Json

if ($null -ne $status) {
  switch ($status.status) {
    "unauthenticated" {
      if ($null -eq $status.serverUrl -or $status.serverUrl -ne $Bitwarden.serverUrl) {
        # Vault not configured, configure server
        [void](Invoke-Command -ScriptBlock { & "$($Bitwarden.exec_path)" config server "$($Bitwarden.serverUrl)" })
      }

      # Prepare Vault login using API key
      $env:BW_CLIENTID = $Bitwarden.clientId
      $env:BW_CLIENTSECRET = $Bitwarden.clientSecret
      $env:BW_PASSWORD = $Bitwarden.password
      [void](Invoke-Command -ScriptBlock { & "$($Bitwarden.exec_path)" login --apikey})

      # Unlock Vault using password
      $Bitwarden.session = Invoke-Command -ScriptBlock { & "$($Bitwarden.exec_path)" unlock --passwordenv BW_PASSWORD --raw }

      if ($null -eq $Bitwarden.session -or $Bitwarden.session -eq "") {
        Write-Error -Message "Unable to authenticate and unlock your vault. Please check your API credentials and master password in Custom Properties." -ErrorAction Stop
      }

      # Clear env variables
      Remove-Item -Path Env:\BW_*
    }
    "locked" {
      # Vault is locked, unlock it with password
      $env:BW_PASSWORD = $Bitwarden.password
      $Bitwarden.session = Invoke-Command -ScriptBlock { & "$($Bitwarden.exec_path)" unlock --passwordenv BW_PASSWORD --raw }

      if ($null -eq $Bitwarden.session -or $Bitwarden.session -eq "") {
        Write-Error -Message "Unable to unlock your vault. Please check your master password in Custom Properties." -ErrorAction Stop
      }

      # Clear env variables
      Remove-Item -Path Env:\BW_*
    }
  }
} else {
  Write-Error -Message "Unable to get Vault status, check Server URL in Custom Properties or your connectivity." -ErrorAction Stop
}

if ($null -ne $Bitwarden.session) {
  # Sync Vault to latest version from server
  [void](Invoke-Command -ScriptBlock { & "$($Bitwarden.exec_path)" sync --session "$($Bitwarden.session)"})

  # Get and parse Personal Vault folders
  $tmpFolders = (Invoke-Command -ScriptBloc { & "$($Bitwarden.exec_path)" list folders --session "$($Bitwarden.session)"}) | ConvertFrom-Json

  foreach ($folder in $tmpFolders) {
    if ($null -ne $folder.id) {
      $tF = @{ Type = "Folder"; ID = $folder.id; Name = $folder.name; Objects = [array]@(Get-VaultItems -folderId $folder.id); }
      if ($tF.Objects.Count -ne 0) { $final.Objects[0].Objects += $tF; $tF = $null }
    } else {
      # Add default folder
      $tF = @{ Type = "Folder"; ID = "nofolder"; Name = "No folder"; Objects = [array]@(Get-VaultItems -folderId null); }
      if ($tF.Objects.Count -ne 0) { $final.Objects[0].Objects += $tF; $tF = $null }
    }
  }

  # Get and parse Organisations and Collections
  $organizations = (Invoke-Command -ScriptBloc { & "$($Bitwarden.exec_path)" list organizations --session "$($Bitwarden.session)"}) | ConvertFrom-Json

  foreach ($org in $organizations) {
    # Get collections for the organization
    $collections = (Invoke-Command -ScriptBloc { & "$($Bitwarden.exec_path)" list collections --organizationid $org.id --session "$($Bitwarden.session)"}) | ConvertFrom-Json
    $tOrgCollections = [array]@()
    foreach ($coll in $collections) {
      $tF = @{ Type = "Folder"; ID = $coll.id; Name = $coll.name; IconName = "Flat/Software/Tree"; Objects = [array]@(Get-VaultItems -collectionId $coll.id); }
      if ($tF.Objects.Count -ne 0) { $tOrgCollections += $tF; $tF = $null }
    }
    if ($tOrgCollections.Count -gt 0) {
      # Create organization folder
      $final.Objects += @{ Type = "Folder"; ID = $org.id; Name = $org.name; IconName = "Flat/Money/Bank"; Objects = $tOrgCollections; }
    }
  }
}

# Adapt JSON output for PowerShell version
if ($PSVersionTable.PSVersion -ge '6.2') {
  #ConvertTo-Json -InputObject $final -Depth 100 -EscapeHandling EscapeHtml |Out-file ".\bitwarden_output.json" -Force
  ConvertTo-Json -InputObject $final -Depth 100 -EscapeHandling EscapeHtml
} else {
  #ConvertTo-Json -InputObject $final -Depth 100 |Out-file ".\bitwarden_output.json" -Force
  ConvertTo-Json -InputObject $final -Depth 100
}
]]></Script>
      <DynamicCredentialScriptInterpreter>json</DynamicCredentialScriptInterpreter>
    </DynamicFolderExportObject>
  </Objects>
</DynamicFolderExport>
