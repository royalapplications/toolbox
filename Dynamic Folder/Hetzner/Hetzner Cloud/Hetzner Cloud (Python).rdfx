<DynamicFolderExport>
  <Name>Dynamic Folder Export</Name>
  <Objects>
    <DynamicFolderExportObject>
      <Type>DynamicFolder</Type>
      <Name>Hetzner Cloud (Python)</Name>
      <Description>This Dynamic Folder script will list all your servers for the given API Key of the Hetzner Cloud.</Description>
      <Notes><![CDATA[<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
<title></title>
<style type="text/css">.cs2654AE3A{text-align:left;text-indent:0pt;margin:0pt 0pt 0pt 0pt}
			.csE8BD414E{color:#000000;background-color:transparent;font-family:'Times New Roman';font-size:18pt;font-weight:bold;font-style:normal;}
			.csAD7A2888{text-align:left;text-indent:0pt;margin:12pt 0pt 12pt 0pt}
			.cs23FB0664{color:#000000;background-color:transparent;font-family:'Times New Roman';font-size:12pt;font-weight:normal;font-style:normal;}
			.cs17BF9202{color:#000000;background-color:transparent;font-family:'Times New Roman';font-size:13.5pt;font-weight:bold;font-style:normal;}
			.cs37063928{text-align:left;margin:0pt 0pt 0pt 0pt;list-style-type:disc;color:#000000;background-color:transparent;font-family:Arial;font-size:12pt;font-weight:normal;font-style:normal}
			.cs9033B17D{color:#000000;background-color:transparent;font-family:'Times New Roman';font-size:12pt;font-weight:normal;font-style:normal;text-decoration: none;}
			.cs1BEFE4A5{color:#0000FF;background-color:transparent;font-family:'Times New Roman';font-size:12pt;font-weight:normal;font-style:normal;text-decoration: underline;}
</style>
<h2 class="cs2654AE3A"><span class="csE8BD414E">Dynamic Folder support for Hetzner Cloud</span></h2>

<p class="csAD7A2888"><span class="cs23FB0664">Version: 1.0<br />
Author: Max Schmitt</span></p>

<p class="csAD7A2888"><span class="cs23FB0664">This Dynamic Folder script will list all your servers for the given API Key of the Hetzner Cloud.</span></p>

<p class="csAD7A2888"><span class="cs17BF9202">Prerequisites</span></p>

<ul style="margin-top:0;margin-bottom:0;">
	<li class="cs37063928"><span class="cs23FB0664"><a class="cs9033B17D" href="https://github.com/hetznercloud/cli"><span class="cs1BEFE4A5">Hetzner Cloud Command Line Interface</span></a></span><span class="cs23FB0664"> (CLI) needs to be installed, so it&#39;s binary is available in the PATH environment variable.</span></li>
</ul>

<h3 class="cs2654AE3A"><span class="cs17BF9202">Setup</span></h3>

<ul style="margin-top:0;margin-bottom:0;">
	<li class="cs37063928"><span class="cs23FB0664">Enter your API Key, which you&#39;ve got from the Hetzner Cloud Console and place it under the Custom Properties section of the Dynamic Folder. There&#39;s a property&quot;API Key&quot;, which is used to store the API Key of your project.</span></li>
</ul>

<h3 class="cs2654AE3A"><span class="cs17BF9202">Notes</span></h3>

<ul style="margin-top:0;margin-bottom:0;">
	<li class="cs37063928"><span class="cs23FB0664">Per default the auto created servers are setup to inherit their credentials from the Dynamic Folder. So if you set their the credentials all underlying servers will use them.</span></li>
</ul>
]]></Notes>
      <CustomProperties>
        <CustomProperty>
          <Name>API Key</Name>
          <Type>Protected</Type>
          <Value>TODO</Value>
        </CustomProperty>
      </CustomProperties>
      <ScriptInterpreter>python</ScriptInterpreter>
      <Script><![CDATA[import subprocess
import json
import os
import re
import sys

# log_error will write the error to the stderr, so that Royal TS will display it.


def log_error(err):
    print("error: {}".format(err.strip()), file=sys.stderr)
    exit(1)


def get_instances(api_key):
    os.environ["HCLOUD_TOKEN"] = api_key
    cmd = "hcloud"
    store = {
        "Objects": []
    }
    # get servers
    server_list_process = subprocess.Popen(
        "{} server list -o columns=id,name,ipv4 -o noheader".format(cmd), stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    (stdout, stderr) = server_list_process.communicate()
    exit_code = server_list_process.wait()
    # check if hcloud returned a successful status code != 0
    if exit_code != 0:
        log_error("could not get server list: {}".format(stderr.decode()))
    # loop over the returned servers and build the royal ts JSON
    for line in stdout.decode().strip().splitlines():
        values = re.findall(r"[^ ]+", line)
        store["Objects"].append({
            "ID": values[0],
            "Name": values[1],
            "ComputerName": values[2],
            "Username": "root",
            "Type": "TerminalConnection",
            "TerminalConnectionType": "SSH",
            "CredentialsFromParent": True
        })
    return json.dumps(store)


print(get_instances("$CustomProperty.APIKey$"))
]]></Script>
      <DynamicCredentialScriptInterpreter>json</DynamicCredentialScriptInterpreter>
      <DynamicFolderScriptTokenMode>ReplaceInline</DynamicFolderScriptTokenMode>
      <DynamicFolderScriptEnvironmentPrefix>DynFolder_</DynamicFolderScriptEnvironmentPrefix>
      <DynamicCredentialScriptTokenMode>ReplaceInline</DynamicCredentialScriptTokenMode>
      <DynamicCredentialScriptEnvironmentPrefix>DynCredential_</DynamicCredentialScriptEnvironmentPrefix>
    </DynamicFolderExportObject>
  </Objects>
</DynamicFolderExport>